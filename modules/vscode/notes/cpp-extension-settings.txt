Compiler Options
----------------
https://code.visualstudio.com/docs/cpp/customize-default-settings-cpp
https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference

C_Cpp.default.includePath                          : string[]
C_Cpp.default.defines                              : string[]
C_Cpp.default.compileCommands                      : string
C_Cpp.default.macFrameworkPath                     : string[]
C_Cpp.default.forcedIncludes                       : string[] -- typo?
C_Cpp.default.intelliSenseMode                     : string
C_Cpp.default.compilerPath                         : string
C_Cpp.default.cStandard                            : c89 | c99 | c11
C_Cpp.default.cppStandard                          : c++98 | c++03 | c++11 | c++14 | c++17
C_Cpp.default.browse.path                          : string[]
C_Cpp.default.browse.databaseFilename              : string
C_Cpp.default.browse.limitSymbolsToIncludedHeaders : boolean
C_Cpp.default.compilerArgs                         : ???
C_Cpp.default.configurationProvider                : ???
C_Cpp.default.enableConfigurationSquiggles         : ???
C_Cpp.default.forcedInclude                        : ???
C_Cpp.default.systemIncludePath                    : ???
C_Cpp.default.windowsSdkVersion                    : ???



Everything
----------
	// Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// Controls the auto-completion provider. "Default" uses the active IntelliSense engine. "Disabled" uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the clang-format executable. If not specified, and clang-format is available in the environment path, that is used.  If not found in the environment path, a copy of clang-format bundled with the extension will be used.
	"C_Cpp.clang_format_path": null,

	// If set, overrides the include sorting behavior determined by the SortIncludes parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use "file" to load the style from a .clang-format file in the current or parent directory. Use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }
	"C_Cpp.clang_format_style": "file",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "Enabled",

	// The value to use in a configuration if "browse.databaseFilename" is either not specified or set to "${default}".
	"C_Cpp.default.browse.databaseFilename": null,

	// The value to use in a configuration if "browse.limitSymbolsToIncludedHeaders" is either not specified or set to "${default}".
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if "browse.path" is not specified, or the values to insert if "${default}" is present in "browse.path".
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if "compileCommands" is either not specified, or set to "${default}".
	"C_Cpp.default.compileCommands": null,

	// The value to use in configuration if "compilerArgs" is either not specified or set to "${default}".
	"C_Cpp.default.compilerArgs": null,

	// The value to use in a configuration if "compilerPath" is either not specified or set to "${default}".
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if "configurationProvider" is either not specified or set to "${default}".
	"C_Cpp.default.configurationProvider": null,

	// The value to use in a configuration if "cppStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cppStandard": null,

	// The value to use in a configuration if "cStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cStandard": null,

	// The value to use in a configuration if "defines" is not specified, or the values to insert if "${default}" is present in "defines".
	"C_Cpp.default.defines": null,

	// Controls whether the extension will report errors detected in c_cpp_properties.json.
	"C_Cpp.default.enableConfigurationSquiggles": null,

	// The value to use in a configuration if "forcedInclude" is not specified, or the values to insert if "${default}" is present in "forcedInclude".
	"C_Cpp.default.forcedInclude": null,

	// The value to use in a configuration if "includePath" is not specified, or the values to insert if "${default}" is present in "includePath".
	"C_Cpp.default.includePath": null,

	// The value to use in a configuration if "intelliSenseMode" is either not specified or set to "${default}".
	"C_Cpp.default.intelliSenseMode": null,

	// The value to use in a configuration if "macFrameworkPath" is not specified, or the values to insert if "${default}" is present in "macFrameworkPath".
	"C_Cpp.default.macFrameworkPath": null,

	// The value to use for the system include path. If set, it overrides the system include path acquired via "compilerPath" and "compileCommands" settings.
	"C_Cpp.default.systemIncludePath": null,

	// Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.
	"C_Cpp.default.windowsSdkVersion": null,

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.enhancedColorization": "Enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Instructs the extension when to use the "files.exclude" setting when determining which files should be added to the code navigation database while traversing through the paths in the "browse.path" array. "checkFolders" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). "checkFilesAndFolders" means that the exclusion filters will be evaluated against every file and folder encountered. If your "files.exclude" setting only contains folders, then "checkFolders" is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "Disabled",

	// "Default" enables code formatting. "Disabled" disables code formatting.
	"C_Cpp.formatting": "Default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": null,

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": null,

	// Controls the opacity of inactive preprocessor blocks. Scales between 0.1 and 1.0. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is "%LocalAppData%/Microsoft/vscode-cpptools" on Windows, "$XDG_CACHE_HOME/vscode-cpptools/" on Linux (or "~/.cache/vscode-cpptools/" if XDG_CACHE_HOME is not defined), and "~/Library/Caches/vscode-cpptools/" on Mac. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": null,

	// Maximum size of the per-workspace hard drive space in megabytes for cached precompiled headers; the actual usage may fluctuate around this value. The default size is 5120 MB. Precompiled header caching is disabled when the size is 0.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Controls the IntelliSense provider. "Tag Parser" provides "fuzzy" results that are not context-aware. "Default" provides context-aware results. "Disabled" turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "Default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.
	"C_Cpp.loggingLevel": "Error",

	// The character used as a path separator for #include auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// If true, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If true, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Set to "Insiders" to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Default",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked
	"C_Cpp.workspaceSymbols": "Just My Code",
